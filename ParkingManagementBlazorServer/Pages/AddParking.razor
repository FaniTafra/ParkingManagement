<h3>AddParking</h3>
@page "/AddParking"
@using System.Text;
@using DomainModel.Models;
@using ParkingManagementBlazorServer.Services;
@using ParkingManagementBlazorServer.ValidationModels;
@inject ParkingService _parkingService;
@inject NavigationManager _navigationManager;

<EditForm Model="@Parking" OnValidSubmit="@AddParkingAsync">
    <ParkingFields Parking="@Parking"></ParkingFields>
    <button type="submit" class="btn btn-success">
        <span class="oi-pencil"></span>
        Add Parking
    </button>
    <button type="button" class="btn btn-secondary" @onclick="Close">
        <span class="oi oi-media-skip-backward"></span>
        Close
    </button>
</EditForm>

<NotificationDialog @ref="NotificationDialog" Description="@ConcatenatedValidationErrors"></NotificationDialog>


@code {
    public Parking Parking { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Parking = new Parking();
        Parking.ParkingFrom = DateTime.Now;
        Parking.ParkingTo = DateTime.Now;
        Parking.OwnerId = 4;
    }
    private async Task AddParkingAsync()

    {
        ValidationErrors = ValidateParking();
        if (ValidationErrors.Any())
        {
            ConcatenatedValidationErrors = GetConcatenatedValidationErrors(ValidationErrors);
            NotificationDialog.Show();
        }
        else
        {
            await _parkingService.AddParkingAsync(Parking);
            Close();
        }
    }
    private void Close()
    {
        _navigationManager.NavigateTo("/");
    }

    public NotificationDialog NotificationDialog { get; set; }
    public List<ValidationError> ValidationErrors { get; set; }
    public String ConcatenatedValidationErrors { get; set; }


    private List<ValidationError> ValidateParking()
    {
        var validationErrors = new List<ValidationError>();
        if (String.IsNullOrWhiteSpace(Parking.City))
            validationErrors.Add(new ValidationError { Description = "Please insert city!" });
        if (String.IsNullOrWhiteSpace(Parking.Neighborhood))
            validationErrors.Add(new ValidationError { Description = "Please insert Neighborhood!" });
        return validationErrors;
    }

    private string GetConcatenatedValidationErrors(List<ValidationError> ValidationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach (var error in ValidationErrors)
        {
            if (message.Length == 0)
                message.Append(error.Description);
            else
                message.Append($"{Environment.NewLine} {error.Description}");
        }
        return message.ToString();
    }
}
