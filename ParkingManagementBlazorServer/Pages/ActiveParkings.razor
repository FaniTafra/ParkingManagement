
@page "/ActiveParkings"
@using DomainModel.Enums;
@using DomainModel.Models;
@using ParkingManagementBlazorServer.Services;
@inject ParkingService _parkingService;
@inject CustomAuthenticationStateProvider _customAuthenticationStateProvider;

@code {
    private List<Parking>? Parkings { get; set; }
    private List<Parking>? SelectedParkings { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Parkings = await _parkingService.GetActiveParkings();
        SelectedParkings = await _parkingService.GetSelectedParkings();
        await _customAuthenticationStateProvider.DeleteExpiredTokenFromLocalStorage();
    }

    public ConfirmationDialog DeleteConfirmationDialog { get; set; }
    public ConfirmationDialog CancelConfirmationDialog { get; set; }
    public int SelectedParkingId { get; set; }


    private async Task OnDeleteConfirmationSelected(bool isDeleteConfirmed)
    {
        if (isDeleteConfirmed)
        {
            await _parkingService.DeleteParking(SelectedParkingId);
            Parkings = await _parkingService.GetActiveParkings();
        }
    }

    private async Task DeleteParking(int parkingId)
    {
        SelectedParkingId = parkingId;
        DeleteConfirmationDialog.Show();
    }

    private async Task CancelParking(int parkingId)
    {
        SelectedParkingId = parkingId;
        CancelConfirmationDialog.Show();
    }

    private async Task OnCancelConfirmationSelected(bool isDeleteConfirmed)
    {
        if (isDeleteConfirmed)
        {
            await _parkingService.CancelParking(SelectedParkingId);
            SelectedParkings = await _parkingService.GetSelectedParkings();
        }
    }
}

<ConfirmationDialog @ref="DeleteConfirmationDialog" ConfirmationChanged="@OnDeleteConfirmationSelected"></ConfirmationDialog>
<ConfirmationDialog @ref="CancelConfirmationDialog" ConfirmationChanged="@OnCancelConfirmationSelected"></ConfirmationDialog>

@if (Parkings == null && SelectedParkings == null)
{
    <div>Loading...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">City</th>
                <th scope="col">Neighborhood</th>
                <th scope="col">From</th>
                <th scope="col">To</th>
            </tr>
        </thead>
        <tbody>
            @if (Parkings != null)
            {
                @foreach (var parking in Parkings)
                {
                    <tr>
                        <td>@parking.City</td>
                        <td>@parking.Neighborhood</td>
                        <td>@parking.ParkingFrom.ToString("dd.MM.yyyy")</td>
                        <td>@parking.ParkingTo.ToString("dd.MM.yyyy")</td>
                        <td>
                            <a href="/EditParking/@parking.Id" class="btn btn-primary">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button type="button" @onclick="() => DeleteParking(parking.Id)">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }   
            }
            @if (SelectedParkings != null)
            {
                @foreach (var parking in SelectedParkings)
                {
                    @if(parking.ParkingTo > DateTime.Now && parking.Status != ParkingStatus.Archived)
                    {
                        <tr>
                            <td>@parking.City</td>
                            <td>@parking.Neighborhood</td>
                            <td>@parking.ParkingFrom.ToString("dd.MM.yyyy")</td>
                            <td>@parking.ParkingTo.ToString("dd.MM.yyyy")</td>
                            @if (parking.Status != ParkingStatus.InUse && DateOnly.FromDateTime(parking.ParkingFrom.AddDays(-1)) > DateOnly.FromDateTime(DateTime.Now))
                            {
                                <td>
                                    <button type="button" class="btn btn-danger" @onclick="() => CancelParking(parking.Id)">
                                        Cancel
                                    </button>
                                </td>
                            }
                        </tr>
                    }
                }    
            }
        </tbody>
    </table>
}
