@using DomainModel.Models;
@using ParkingManagementBlazorServer.Services;
@using System.Text;
@using ParkingManagementBlazorServer.ValidationModels;
@inject ParkingService _parkingService;
@inject NavigationManager _navigationManager;
<h3>EditParking</h3>
@page "/EditParking/{ParkingId}"

@code {
    [Parameter]
    public string ParkingId { get; set; }
    private Parking Parking { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Parking = await _parkingService.GetParkingAsync(int.Parse(ParkingId));
    }
    private void Close()
    {
        _navigationManager.NavigateTo("ActiveParkings");
    }
    private async Task UpdateParkingAsync()
    {
            ValidationErrors = ValidateParking();
            if (ValidationErrors.Any())
            {
                ConcatenatedValidationErrors = GetConcatenatedValidationErrors(ValidationErrors);
                NotificationDialog.Show();
            }
            else
            {
                await _parkingService.UpdateParkingAsync(Parking);
                Close();
            }
    }
    public NotificationDialog NotificationDialog { get; set; }
    public List<ValidationError> ValidationErrors { get; set; }
    public String ConcatenatedValidationErrors { get; set; }


    private List<ValidationError> ValidateParking()
    {
        var validationErrors = new List<ValidationError>();
        if (String.IsNullOrWhiteSpace(Parking.City))
            validationErrors.Add(new ValidationError { Description = "Please insert city!" });
        if (String.IsNullOrWhiteSpace(Parking.Neighborhood))
            validationErrors.Add(new ValidationError { Description = "Please insert Neighborhood!" });
        return validationErrors;
    }

    private string GetConcatenatedValidationErrors(List<ValidationError> ValidationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach (var error in ValidationErrors)
        {
            if (message.Length == 0)
                message.Append(error.Description);
            else
                message.Append($"{Environment.NewLine} {error.Description}");
        }
        return message.ToString();
    }
}

@if(Parking == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@Parking" OnValidSubmit="@UpdateParkingAsync">
        <ParkingFields Parking="@Parking"></ParkingFields>
        <button type="submit" class="btn btn-success">
            <span class="oi-pencil"></span>
            Update Parking
        </button>
        <button type="button" class="btn btn-secondary" @onclick="Close">
            <span class="oi oi-media-skip-backward"></span>
            Close
        </button>
    </EditForm>

    <NotificationDialog @ref="NotificationDialog" Description="@ConcatenatedValidationErrors"></NotificationDialog>
}